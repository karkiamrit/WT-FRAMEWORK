/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { SensorDataService } from "../sensorData.service";
import { SensorDataCreateInput } from "./SensorDataCreateInput";
import { SensorDataWhereInput } from "./SensorDataWhereInput";
import { SensorDataWhereUniqueInput } from "./SensorDataWhereUniqueInput";
import { SensorDataFindManyArgs } from "./SensorDataFindManyArgs";
import { SensorDataUpdateInput } from "./SensorDataUpdateInput";
import { SensorData } from "./SensorData";

export class SensorDataGrpcControllerBase {
  constructor(protected readonly service: SensorDataService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SensorData })
  @GrpcMethod("SensorDataService", "createSensorData")
  async createSensorData(
    @common.Body() data: SensorDataCreateInput
  ): Promise<SensorData> {
    return await this.service.createSensorData({
      data: data,
      select: {
        createdAt: true,
        deviceOwner: true,
        id: true,
        key: true,
        timestamp: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SensorData] })
  @ApiNestedQuery(SensorDataFindManyArgs)
  @GrpcMethod("SensorDataService", "sensorDataItems")
  async sensorDataItems(@common.Req() request: Request): Promise<SensorData[]> {
    const args = plainToClass(SensorDataFindManyArgs, request.query);
    return this.service.sensorDataItems({
      ...args,
      select: {
        createdAt: true,
        deviceOwner: true,
        id: true,
        key: true,
        timestamp: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SensorData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("SensorDataService", "sensorData")
  async sensorData(
    @common.Param() params: SensorDataWhereUniqueInput
  ): Promise<SensorData | null> {
    const result = await this.service.sensorData({
      where: params,
      select: {
        createdAt: true,
        deviceOwner: true,
        id: true,
        key: true,
        timestamp: true,
        updatedAt: true,
        value: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SensorData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("SensorDataService", "updateSensorData")
  async updateSensorData(
    @common.Param() params: SensorDataWhereUniqueInput,
    @common.Body() data: SensorDataUpdateInput
  ): Promise<SensorData | null> {
    try {
      return await this.service.updateSensorData({
        where: params,
        data: data,
        select: {
          createdAt: true,
          deviceOwner: true,
          id: true,
          key: true,
          timestamp: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SensorData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("SensorDataService", "deleteSensorData")
  async deleteSensorData(
    @common.Param() params: SensorDataWhereUniqueInput
  ): Promise<SensorData | null> {
    try {
      return await this.service.deleteSensorData({
        where: params,
        select: {
          createdAt: true,
          deviceOwner: true,
          id: true,
          key: true,
          timestamp: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
