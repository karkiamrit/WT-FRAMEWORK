/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SensorData as PrismaSensorData } from "@prisma/client";
import { SensorData } from "./SensorData";
import { SensorDataFindUniqueArgs } from "./SensorDataFindUniqueArgs";
import { SensorDataWhereUniqueInput } from "./SensorDataWhereUniqueInput";

export class SensorDataServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SensorDataCountArgs, "select">
  ): Promise<number> {
    return this.prisma.sensorData.count(args);
  }

  async sensorDataItems<T extends Prisma.SensorDataFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SensorDataFindManyArgs>
  ): Promise<PrismaSensorData[]> {
    return this.prisma.sensorData.findMany<Prisma.SensorDataFindManyArgs>(args);
  }
  async sensorData<T extends Prisma.SensorDataFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SensorDataFindUniqueArgs>
  ): Promise<PrismaSensorData | null> {
    return this.prisma.sensorData.findUnique(args);
  }
  async createSensorData<T extends Prisma.SensorDataCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SensorDataCreateArgs>
  ): Promise<PrismaSensorData> {
    return this.prisma.sensorData.create<T>(args);
  }
  async updateSensorData<T extends Prisma.SensorDataUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SensorDataUpdateArgs>
  ): Promise<PrismaSensorData> {
    return this.prisma.sensorData.update<T>(args);
  }
  async deleteSensorData<T extends Prisma.SensorDataDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SensorDataDeleteArgs>
  ): Promise<PrismaSensorData> {
    return this.prisma.sensorData.delete(args);
  }
  async FetchSensorData(args: SensorData): Promise<SensorData[]> {
    throw new Error("Not implemented");
  }
  async GetSensorData(args: SensorData): Promise<SensorData[]> {
    throw new Error("Not implemented");
  }
  async RestCreateSensorData(
    args: SensorDataFindUniqueArgs
  ): Promise<SensorDataWhereUniqueInput> {
    throw new Error("Not implemented");
  }
}
