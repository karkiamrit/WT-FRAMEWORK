/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PositionService } from "../position.service";
import { PositionCreateInput } from "./PositionCreateInput";
import { Position } from "./Position";
import { PositionFindManyArgs } from "./PositionFindManyArgs";
import { PositionWhereUniqueInput } from "./PositionWhereUniqueInput";
import { PositionUpdateInput } from "./PositionUpdateInput";

export class PositionControllerBase {
  constructor(protected readonly service: PositionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Position })
  async createPosition(
    @common.Body() data: PositionCreateInput
  ): Promise<Position> {
    return await this.service.createPosition({
      data: data,
      select: {
        altitude: true,
        createdAt: true,
        id: true,
        latitude: true,
        longitude: true,
        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Position] })
  @ApiNestedQuery(PositionFindManyArgs)
  async positions(@common.Req() request: Request): Promise<Position[]> {
    const args = plainToClass(PositionFindManyArgs, request.query);
    return this.service.positions({
      ...args,
      select: {
        altitude: true,
        createdAt: true,
        id: true,
        latitude: true,
        longitude: true,
        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Position })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async position(
    @common.Param() params: PositionWhereUniqueInput
  ): Promise<Position | null> {
    const result = await this.service.position({
      where: params,
      select: {
        altitude: true,
        createdAt: true,
        id: true,
        latitude: true,
        longitude: true,
        timestamp: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Position })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePosition(
    @common.Param() params: PositionWhereUniqueInput,
    @common.Body() data: PositionUpdateInput
  ): Promise<Position | null> {
    try {
      return await this.service.updatePosition({
        where: params,
        data: data,
        select: {
          altitude: true,
          createdAt: true,
          id: true,
          latitude: true,
          longitude: true,
          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Position })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePosition(
    @common.Param() params: PositionWhereUniqueInput
  ): Promise<Position | null> {
    try {
      return await this.service.deletePosition({
        where: params,
        select: {
          altitude: true,
          createdAt: true,
          id: true,
          latitude: true,
          longitude: true,
          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/create-position")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async CreatePosition(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.CreatePosition(body);
  }
}
