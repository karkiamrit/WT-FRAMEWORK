/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Position as PrismaPosition } from "@prisma/client";
import { PositionUpdateInput } from "./PositionUpdateInput";
import { PositionWhereUniqueInput } from "./PositionWhereUniqueInput";

export class PositionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PositionCountArgs, "select">): Promise<number> {
    return this.prisma.position.count(args);
  }

  async positions<T extends Prisma.PositionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PositionFindManyArgs>
  ): Promise<PrismaPosition[]> {
    return this.prisma.position.findMany<Prisma.PositionFindManyArgs>(args);
  }
  async position<T extends Prisma.PositionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PositionFindUniqueArgs>
  ): Promise<PrismaPosition | null> {
    return this.prisma.position.findUnique(args);
  }
  async createPosition<T extends Prisma.PositionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PositionCreateArgs>
  ): Promise<PrismaPosition> {
    return this.prisma.position.create<T>(args);
  }
  async updatePosition<T extends Prisma.PositionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PositionUpdateArgs>
  ): Promise<PrismaPosition> {
    return this.prisma.position.update<T>(args);
  }
  async deletePosition<T extends Prisma.PositionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PositionDeleteArgs>
  ): Promise<PrismaPosition> {
    return this.prisma.position.delete(args);
  }
  async CreatePosition(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async CreatePositionRest(
    args: PositionUpdateInput
  ): Promise<PositionWhereUniqueInput> {
    throw new Error("Not implemented");
  }
  async RestCreatePosition(
    args: PositionUpdateInput
  ): Promise<PositionWhereUniqueInput> {
    throw new Error("Not implemented");
  }
}
