/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, EmailTemplate as PrismaEmailTemplate } from "@prisma/client";
import { EmailTemplateCreateInput } from "./EmailTemplateCreateInput";
import { EmailTemplateUpdateInput } from "./EmailTemplateUpdateInput";
import { EmailTemplate } from "./EmailTemplate";
import { EmailTemplateWhereUniqueInput } from "./EmailTemplateWhereUniqueInput";

export class EmailTemplateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EmailTemplateCountArgs, "select">
  ): Promise<number> {
    return this.prisma.emailTemplate.count(args);
  }

  async emailTemplates<T extends Prisma.EmailTemplateFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmailTemplateFindManyArgs>
  ): Promise<PrismaEmailTemplate[]> {
    return this.prisma.emailTemplate.findMany<Prisma.EmailTemplateFindManyArgs>(
      args
    );
  }
  async emailTemplate<T extends Prisma.EmailTemplateFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmailTemplateFindUniqueArgs>
  ): Promise<PrismaEmailTemplate | null> {
    return this.prisma.emailTemplate.findUnique(args);
  }
  async createEmailTemplate<T extends Prisma.EmailTemplateCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmailTemplateCreateArgs>
  ): Promise<PrismaEmailTemplate> {
    return this.prisma.emailTemplate.create<T>(args);
  }
  async updateEmailTemplate<T extends Prisma.EmailTemplateUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmailTemplateUpdateArgs>
  ): Promise<PrismaEmailTemplate> {
    return this.prisma.emailTemplate.update<T>(args);
  }
  async deleteEmailTemplate<T extends Prisma.EmailTemplateDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmailTemplateDeleteArgs>
  ): Promise<PrismaEmailTemplate> {
    return this.prisma.emailTemplate.delete(args);
  }
  async CreateEmailTemplateRest(
    args: EmailTemplateCreateInput
  ): Promise<EmailTemplateUpdateInput> {
    throw new Error("Not implemented");
  }
  async EmailNotify(args: EmailTemplate): Promise<EmailTemplate> {
    throw new Error("Not implemented");
  }
  async RestCreateEmailTemplate(
    args: EmailTemplateCreateInput
  ): Promise<EmailTemplateWhereUniqueInput> {
    throw new Error("Not implemented");
  }
  async SendEmailNotification(args: EmailTemplate): Promise<EmailTemplate> {
    throw new Error("Not implemented");
  }
  async SendNotification(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
}
