/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EmailTemplateService } from "../emailTemplate.service";
import { EmailTemplateCreateInput } from "./EmailTemplateCreateInput";
import { EmailTemplate } from "./EmailTemplate";
import { EmailTemplateFindManyArgs } from "./EmailTemplateFindManyArgs";
import { EmailTemplateWhereUniqueInput } from "./EmailTemplateWhereUniqueInput";
import { EmailTemplateUpdateInput } from "./EmailTemplateUpdateInput";

export class EmailTemplateControllerBase {
  constructor(protected readonly service: EmailTemplateService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EmailTemplate })
  async createEmailTemplate(
    @common.Body() data: EmailTemplateCreateInput
  ): Promise<EmailTemplate> {
    return await this.service.createEmailTemplate({
      data: data,
      select: {
        createdAt: true,
        htmlContent: true,
        id: true,
        textContent: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EmailTemplate] })
  @ApiNestedQuery(EmailTemplateFindManyArgs)
  async emailTemplates(
    @common.Req() request: Request
  ): Promise<EmailTemplate[]> {
    const args = plainToClass(EmailTemplateFindManyArgs, request.query);
    return this.service.emailTemplates({
      ...args,
      select: {
        createdAt: true,
        htmlContent: true,
        id: true,
        textContent: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EmailTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async emailTemplate(
    @common.Param() params: EmailTemplateWhereUniqueInput
  ): Promise<EmailTemplate | null> {
    const result = await this.service.emailTemplate({
      where: params,
      select: {
        createdAt: true,
        htmlContent: true,
        id: true,
        textContent: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EmailTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEmailTemplate(
    @common.Param() params: EmailTemplateWhereUniqueInput,
    @common.Body() data: EmailTemplateUpdateInput
  ): Promise<EmailTemplate | null> {
    try {
      return await this.service.updateEmailTemplate({
        where: params,
        data: data,
        select: {
          createdAt: true,
          htmlContent: true,
          id: true,
          textContent: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EmailTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEmailTemplate(
    @common.Param() params: EmailTemplateWhereUniqueInput
  ): Promise<EmailTemplate | null> {
    try {
      return await this.service.deleteEmailTemplate({
        where: params,
        select: {
          createdAt: true,
          htmlContent: true,
          id: true,
          textContent: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/email-templates")
  @swagger.ApiOkResponse({
    type: EmailTemplateUpdateInput,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async CreateEmailTemplateRest(
    @common.Body()
    body: string
  ): Promise<EmailTemplateUpdateInput> {
    return this.service.CreateEmailTemplateRest(body);
  }

  @common.Post("/notify-email")
  @swagger.ApiOkResponse({
    type: EmailTemplate,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async EmailNotify(
    @common.Body()
    body: string
  ): Promise<EmailTemplate> {
    return this.service.EmailNotify(body);
  }

  @common.Post("/create-email-template")
  @swagger.ApiOkResponse({
    type: EmailTemplateWhereUniqueInput,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async RestCreateEmailTemplate(
    @common.Body()
    body: string
  ): Promise<EmailTemplateWhereUniqueInput> {
    return this.service.RestCreateEmailTemplate(body);
  }

  @common.Post("/send-mail")
  @swagger.ApiOkResponse({
    type: EmailTemplate,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async SendEmailNotification(
    @common.Body()
    body: string
  ): Promise<EmailTemplate> {
    return this.service.SendEmailNotification(body);
  }

  @common.Get("/:id/send-notification")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async SendNotification(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.SendNotification(body);
  }
}
